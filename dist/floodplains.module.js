function t(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,o=new Array(r);e<r;e++)o[e]=t[e];return o}function r(r,e){var o;if("undefined"==typeof Symbol||null==r[Symbol.iterator]){if(Array.isArray(r)||(o=function(r,e){if(r){if("string"==typeof r)return t(r,void 0);var o=Object.prototype.toString.call(r).slice(8,-1);return"Object"===o&&r.constructor&&(o=r.constructor.name),"Map"===o||"Set"===o?Array.from(r):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?t(r,void 0):void 0}}(r))||e&&r&&"number"==typeof r.length){o&&(r=o);var n=0;return function(){return n>=r.length?{done:!0}:{done:!1,value:r[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(o=r[Symbol.iterator]()).next.bind(o)}function e(){this.callbacksLookup={}}e.prototype={emit:function(t,e){for(var o,n=this.callbacksLookup["*"]||[],a=r(this.callbacksLookup[t]||[]);!(o=a()).done;)(0,o.value)({name:t,value:e});for(var l,i=r(n);!(l=i()).done;)(0,l.value)({name:t,value:e})},on:function(t,e){for(var o,n=r(Array.isArray(t)?t:[t]);!(o=n()).done;){var a=o.value;this.callbacksLookup[a]||(this.callbacksLookup[a]=[]),this.callbacksLookup[a].push(e)}}};export default e;
//# sourceMappingURL=floodplains.module.js.map
