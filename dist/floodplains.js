function r(r,t){(null==t||t>r.length)&&(t=r.length);for(var o=0,e=new Array(t);o<t;o++)e[o]=r[o];return e}function t(t,o){var e;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(e=function(t,o){if(t){if("string"==typeof t)return r(t,void 0);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?r(t,void 0):void 0}}(t))||o&&t&&"number"==typeof t.length){e&&(t=e);var n=0;return function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(e=t[Symbol.iterator]()).next.bind(e)}function o(){this.callbacksLookup={}}o.prototype={emit:function(r,o){for(var e,n=this.callbacksLookup["*"]||[],a=t(this.callbacksLookup[r]||[]);!(e=a()).done;)(0,e.value)({name:r,value:o});for(var l,i=t(n);!(l=i()).done;)(0,l.value)({name:r,value:o})},on:function(r,o){for(var e,n=t(Array.isArray(r)?r:[r]);!(e=n()).done;){var a=e.value;this.callbacksLookup[a]||(this.callbacksLookup[a]=[]),this.callbacksLookup[a].push(o)}}},module.exports=o;
//# sourceMappingURL=floodplains.js.map
